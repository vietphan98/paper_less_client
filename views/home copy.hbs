


    <div style="width:100%;height:100%;overflow: auto;" id="bodyMain">
        <div style="width:100%;height: 30px; background:rgb(0, 0, 0); color:white;font-size:15pt;" id="HeaderBody">
            <div style="float:left;width:100px;height:100%">            
                <button style="height:100%;width:100%">Save</button>
            </div>
            <div style="text-align:center;float:left;width:calc(100% - 110px);line-height:1.2">
                Báo cáo khu vực làm việc sạch sẽ - {{ID_JOB}}
            </div>
        </div>
        <div style="width:100%;height: calc(100% - 30px); background:blanchedalmond;" id="GridMain"></div>
    </div>
<style>

    #GridMain{
        width:100% !important;
    }

</style>

<script>
    var gridMain;
    var colCur = [];
    var doOnLoad = () => {
        let colID = ["ID","SOL","R1_A","R1_B","R2_A","R2_B","R3_A","R3_B","R4_A","R4_B","R5_A","R5_B","R6_A","R6_B","R7_A","R7_B","R8_A","R8_B","R9_A","R9_B","R10_A","R10_B","R11_A","R11_B"]
        let colType = [];
        let colColor = [];
        colID.forEach((id) => {
            if(id.split('_')[0] == "{{Route}}") {
                colType.push("ed");
                colColor.push("#d5f1ff");
                colCur.push(colID.indexOf(id));
            }
            else {
                colType.push("ro");
                colColor.push("");
            }
        })

        colType[1] = "ed";
        colColor[1] = "yellow";

        gridMain = new dhtmlXGridObject('GridMain');

        gridMain.setHeader("0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23")
        gridMain.attachHeader("<b>Đối với UQ và GU: Xác nhận clear SOL và SKU trên tất cả công đoạn</b>,#cspan,#cspan,#cspan,#cspan,#cspan,#cspan,#cspan,#cspan,#cspan,#cspan,#cspan,#cspan,#cspan,#cspan,#cspan,#cspan,#cspan,#cspan,#cspan,#cspan,#cspan,#cspan,#cspan",["text-align:center"]);
        gridMain.attachHeader("<b>Đối với RBO khác: Xác nhận clear SOL từ In > Bóc tách</b>,#cspan,#cspan,#cspan,#cspan,#cspan,#cspan,#cspan,#cspan,#cspan,#cspan,#cspan,<b>Đối với RBO khác: Xác nhận clear SOL từ Sorting > Đóng gói</b>,#cspan,#cspan,#cspan,#cspan,#cspan,#cspan,#cspan,#cspan,#cspan,#cspan,#cspan",["text-align:center;background:yellow",,,,,,,,,,,,"text-align:center;background:lime"]);
        gridMain.attachHeader("<b>Đối với Muji combo: Xác nhận clear SOL từ in > bế</b>,#cspan,#cspan,#cspan,#cspan,#cspan,#cspan,#cspan,#cspan,#cspan,<b>Đối với Muji combo: Xác nhận clear SOL và SKU từ Sorting > Đóng gói</b>,#cspan,#cspan,#cspan,#cspan,#cspan,#cspan,#cspan,#cspan,#cspan,#cspan,#cspan,#cspan,#cspan",["text-align:center;background:#00FFF0",,,,,,,,,,"text-align:center;background:#0E1F00;color:white"]);
        gridMain.attachHeader(",,In,#cspan,Dán Inlay,#cspan,Bồi,#cspan,Bế,#cspan,Bóc tách & phân loại,#cspan,Nạp code/ nạp code+Inkjet,#cspan,Luster,#cspan,100% QC,#cspan,Scan EPC,#cspan,Xỏ dây,#cspan,Đóng gói,#cspan");
        gridMain.attachHeader("No,Xác nhận Clean Line,Clean Line,Trưởng trạm xác nhận,Clean Line,Trưởng trạm xác nhận,Clean Line,Trưởng trạm xác nhận,Clean Line,Trưởng trạm xác nhận,Clean Line,Trưởng trạm xác nhận,Clean Line,Trưởng trạm xác nhận,Clean Line,Trưởng trạm xác nhận,Clean Line,Trưởng trạm xác nhận,Clean Line,Trưởng trạm xác nhận,Clean Line,Trưởng trạm xác nhận,Clean Line,Trưởng trạm xác nhận");
        gridMain.setColumnColor(colColor.join(","));
        gridMain.setColumnIds(colID.join(","));
        gridMain.setColTypes(colType.join(","));
        gridMain.setInitWidths("30,*,50,70,50,70,50,70,50,70,50,70,50,70,50,70,50,70,50,70,50,70,50,70");
        gridMain.setColumnMinWidth("20,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50");
        gridMain.setColAlign("center,center,center,center");

        gridMain.setStyle(
            "text-align:center;font-weight:bold;",
            "","background: blanchedalmond",""
        );
        gridMain.enableBlockSelection(true); 
        gridMain.init();
        gridMain.detachHeader(0);

        gridMain.addRow("ID_JOB",["ID_JOB","0"]);
        gridMain.addRow("SKU",["SKU"]);
        gridMain.setRowColor("SKU","black");
        gridMain.setRowColor("SKU","black");
        gridMain.setCellTextStyle("SKU",0,"color:white;border:1px solid gray;font-weight:bold");


        let n = 1;
        while (n < 100) {
            gridMain.addRow(n,[n, n < 10 ? n : ""]);
            n++;
        }

        let urlSend = "https://zeros.asia:5656/api/report_area/GetData/";
        let dtLoad = AjaxAsync(urlSend,{
            "ID_JOB":"{{ID_JOB}}"
        },"GET", "JSON");
        if(dtLoad.code == 200 && dtLoad.output.length > 0) {
            let dtGrid = dtLoad.output;
            dtGrid.forEach((r,i) => {
                let colID = gridMain.getColIndexById(`${r.route_step}_${r.confirm}`);
                gridMain.cells(r.seq, colID).setValue(r.value);
                gridMain.cells(r.seq, 1).setValue(r.sku);

            });
        }

        gridMain.attachEvent("onEditCell", function(stage,rId,cInd,nValue,oValue){
            if (stage==1 && this.editor){
                this.editor.obj.select();
            }
            return true;
        });

        gridMain.attachEvent("onKeyPress", function(code,cFlag,sFlag){
            var LastRow = this.getRowsNum();
            if(this.getSelectedBlock() == null) return;
            var top_row = this.getSelectedBlock().LeftTopRow;
            var IndexRow = top_row;
            if(typeof top_row == "string") IndexRow = this.getRowIndex(top_row);
            var bottom_row = this.getSelectedBlock().RightBottomRow;
            var left_column = this.getSelectedBlock().LeftTopCol;
            var right_column = this.getSelectedBlock().RightBottomCol;
            if(cFlag && code == 83) {
                alert("Hahaha");
                gridMain.SaveData(colCur);
            } else if(!this.editor && (!cFlag) && ((code > 64 && code < 91) || (code > 47 && code < 58)) || code == 113 || (code >= 96 && code <= 105)) { // Any Key
                if(typeof top_row == "string") this.editCell(); 
                else this.editCell();
                return false;
            } else if(!cFlag && !sFlag && code == 13) { //Enter
                if(IndexRow + 1 == LastRow) return;
                this.selectCell(IndexRow + 1,left_column,false,false,false,true);
                return false;
            } else if(!cFlag && !sFlag && code == 38) { //Up
                if(IndexRow - 1 < 0) return;
                this.selectCell(IndexRow - 1,left_column,false,false,false,true);
                return false;
            } else if(!cFlag && !sFlag && code == 40) { //Down
                if(IndexRow + 1 == LastRow) return;
                this.selectCell(IndexRow + 1,left_column,false,false,false,true);
                return false;
            } else if((!cFlag && !sFlag && code == 39) || (!sFlag && code == 9)) { //Right
                if(left_column + 1 > this.getColumnsNum()) return;
                if(this.editor && this.editor.obj.selectionEnd != this.editor.obj.value.length && this.editor.obj.value.length != 0) return true;
                else {
                    this.selectCell(IndexRow,left_column + 1,false,false,false,true);
                    return false;
                }
            } else if((!cFlag && !sFlag && code == 37) || (sFlag && code == 9)) { //Left
                if(left_column - 1 < 0) return;
                if(this.editor && this.editor.obj.selectionEnd != 0) return true;
                else {
                    this.selectCell(IndexRow,left_column - 1,false,false,false,true);
                    return false;
                }
                return false;
            } else if(!cFlag && !sFlag && code == 46) { //Del
                    if(typeof top_row == "string") {
                        this.cells(top_row,left_column).setValue("");
                    } else { 
                        for(var i = top_row; i <= bottom_row; i++){
                            for(var j = left_column; j <= right_column; j++) {
                                this.cells2(i,j).setValue("");
                            }
                        }
                    }
                return true;
            } else if(!cFlag && sFlag && code == 46) { //Shift + Del
                    if(typeof top_row == "string") {
                        this.deleteRow(top_row);
                    } else {
                        for(var i = bottom_row; i >= top_row; i--){
                            this.deleteRow(this.getRowId(i));
                        }
                    }
                return true;
            }  else if(cFlag && !sFlag && code == 68) { //Ctrl + D
                for(var i = top_row + 1; i <= bottom_row; i++){
                    for(var j = left_column; j <= right_column; j++) {
                        this.cells2(i,j).setValue(this.cells2(top_row,j).getValue());
                    }
                }
            } else if(cFlag && !sFlag && code == 67) { //Copy
                var DataCB = [];
                var DataCB1 = [];
                if(typeof top_row == "string") {
                    DataCB = this.cells(top_row,left_column).getValue() + "\n";
                    copyTextToClipboard(DataCB);
                    this.SelectCellEditor();
                } else {
                    for(var i = top_row; i <= bottom_row; i++){
                        for(var j = left_column; j <= right_column; j++) {
                            DataCB1.push(this.cells2(i,j).getValue().replace("\n",""));
                        }
                        if(DataCB1 != "") DataCB.push(DataCB1.join("\t"));
                        DataCB1 = [];
                    }
                    copyTextToClipboard(DataCB.join("\r\n"));
                }
                return true;
            } else if(cFlag && !sFlag && code == 86) { //Paste
                // if(!this.editor) this.AddClipBoard();
                // return true;
                this.pasteBlockFromClipboard();
            }
            return true;
        });

    }

    dhtmlXGridObject.prototype.SaveData = (col) => {
        console.log(col.length);
        let dataSend = [];
        gridMain.forEachRow((id) => {
            let seq, sku, route, val;
            let routeValue = [];
            sku = gridMain.cells(id,1).getValue();
            if(sku != "" && sku != undefined) {
                seq = gridMain.cells(id,0).getValue();
                if(seq != "SKU") {
                    col.forEach((c) => {
                        route = gridMain.getColumnId(c).split('_');
                        val = gridMain.cells(id,c).getValue();
                        if(route.length == 2) {
                            routeValue.push({
                                "ROUTE": route[0],
                                "CONFIRM": route[1],
                                "VALUE": val
                            })
                        }
                    })

                    dataSend.push({
                        "SEQ" : seq,
                        "SKU" : sku,
                        "DATA" : routeValue
                    });
                }
            }
        })

        let urlSend = "https://zeros.asia:5656/api/report_area/SaveReport/";
        let result = AjaxAsync(urlSend,{
            "ROUTE":"{{Route}}",
            "ID_JOB":"{{ID_JOB}}",
            "DATA":dataSend
        },"POST", "JSON");
    }
</script>